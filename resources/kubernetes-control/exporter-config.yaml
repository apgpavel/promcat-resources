apiVersion: v1
kind: ExporterConfig
app: Kubernetes control plane
version: 1.0.0
appVersion:
- 1.14.0
maintainers:
- name: Sysdig team
  link: https://sysdig.com/
description: |
  # Installing the exporter

  To install the exporter follow this steps:

  1. Create the namespace if it is not already created
    ```
    kubectl create ns monitoring
    ```
  2. Install the helm chart for Prometheus
    ```
    helm install prometheus -n monitoring stable/prometheus
    ```
  3. Add a new replica to fix the rolling update
    ```
    kubectl -n monitoring patch deploy prometheus-server -p '{"spec":{"strategy": {"type": "Recreate"}}}'
    kubectl -n monitoring patch deploy prometheus-server -p '{"spec":{"template":{"metadata":{"annotations":{"prometheus.io/scrape": "true", "prometheus.io/port": "9090"}}}}}'
    ```
    Or just apply the deploy yaml provided
     ```
    kubectl -n monitoring apply -f prometheus-deploy.yaml
    ```
  4. Apply the configuration for prometheus, is the configmap prometheus-server, the configuration has the recording rules and the alerts added if we only want
     the prometheus part we have to delete this lines:
    ```
    kubectl -n monitoring edit cm prometheus-server
    ```
    ```
    - /opt/rules/rules.yaml
    - /opt/alerts/alerts.yaml
    ```
    Once we have the file with only the configmap for prometheus we have to apply, if we have save it as prometheus-cm.yaml then execute the next command:
    ```
    kubectl apply -f prometheus-cm.yaml
    ```

    ---
    **NOTE**

    If you are using kops, you will have to change the cluster spec to expose the port for the proxy

    ```
    kops --state s3://name-of-s3 --name cluster-name edit cluster
    ```

    And add the follow

    ```
    kubeProxy:
      metricsBindAddress: 0.0.0.0
    ```

    And update the cluster

    ```
    kops --state s3://name-of-s3 --name cluster-name rolling-update cluster --yes
    ```

    ---

  If we want to use the Sysdig agent too, we have to create the recording rules for only scrape the metrics we will use in our dashboards.

  1. Apply the rules
    We have to add the recording rules and alerts rules in the prometheus configuration that we have in the next tabs and applied the configuration for our Sysdig agent then we will have our metrics in Sysdig.
    ```
    kubectl apply -f rules.yaml
    ```
  2. Update the Prometheus server configuration with the new configmap for recording rules and with the annotations to federate the Prometheus with the Sysdig agent. Copy the configuration and save it as config.yaml
    ```
    kubectl apply -f sysdig-agent.yaml
    ```
configurations:
- name: sysdig-agent.yaml
  data: |-
    data:
      prometheus.yaml: |-
        global:
          scrape_interval: 15s
          evaluation_interval: 15s
        scrape_configs:
        - job_name: 'prometheus' # config for federation
          honor_labels: true
          metrics_path: '/federate'
          metric_relabel_configs:
          - regex: 'kubernetes_pod_name'
            action: labeldrop
          params:
            'match[]':
              - '{sysdig="true"}'
          sysdig_sd_configs:
          - tags:
              namespace: monitoring
              deployment: prometheus-server

- name: prometheus-deploy.yaml
  data: |-
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: prometheus
        chart: prometheus-11.0.0
        component: server
        heritage: Helm
        release: prometheus
      name: prometheus-server
      namespace: monitoring
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: prometheus
          component: server
          release: prometheus
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            prometheus.io/port: "9090"
            prometheus.io/scrape: "true"
          creationTimestamp: null
          labels:
            app: prometheus
            chart: prometheus-11.0.0
            component: server
            heritage: Helm
            release: prometheus
        spec:
          containers:
          - args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
            image: jimmidyson/configmap-reload:v0.3.0
            imagePullPolicy: IfNotPresent
            name: prometheus-server-configmap-reload
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/config
              name: config-volume
              readOnly: true
            - mountPath: /opt/rules
              name: config-rules
              readOnly: true
            - mountPath: /opt/alerts
              name: config-alerts
              readOnly: true
          - args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            image: prom/prometheus:v2.16.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /-/healthy
                port: 9090
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 30
            name: prometheus-server
            ports:
            - containerPort: 9090
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /-/ready
                port: 9090
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 30
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /opt/rules
              name: config-rules
            - mountPath: /opt/alerts
              name: config-alerts
            - mountPath: /data
              name: storage-volume
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 65534
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
          serviceAccount: prometheus-server
          serviceAccountName: prometheus-server
          terminationGracePeriodSeconds: 300
          volumes:
          - configMap:
              defaultMode: 420
              name: prometheus-server
            name: config-volume
          - configMap:
              defaultMode: 420
              name: rules
            name: config-rules
          - configMap:
              defaultMode: 420
              name: alerts
            name: config-alerts
          - name: storage-volume
            persistentVolumeClaim:
              claimName: prometheus-server

- name: prometheus-cm.yaml
  data: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: prometheus-server
      namespace: monitoring
    data:
      prometheus.yml: |
        global:
          evaluation_interval: 1m
          scrape_interval: 1m
          scrape_timeout: 10s
        rule_files:
        - /opt/rules/rules.yaml
        - /opt/alerts/alerts.yaml
        scrape_configs:
        - job_name: prometheus
          static_configs:
          - targets:
            - localhost:9090
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-apiservers
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: default;kubernetes;https
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_service_name
            - __meta_kubernetes_endpoint_port_name
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics
            source_labels:
            - __meta_kubernetes_node_name
            target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes-cadvisor
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
            source_labels:
            - __meta_kubernetes_node_name
            target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - job_name: kubernetes-service-endpoints
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scrape
          - action: replace
            regex: (https?)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: kubernetes_node
        - honor_labels: true
          job_name: prometheus-pushgateway
          kubernetes_sd_configs:
          - role: service
          relabel_configs:
          - action: keep
            regex: pushgateway
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_probe
        - job_name: kubernetes-services
          kubernetes_sd_configs:
          - role: service
          metrics_path: /probe
          params:
            module:
            - http_2xx
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_probe
          - source_labels:
            - __address__
            target_label: __param_target
          - replacement: blackbox
            target_label: __address__
          - source_labels:
            - __param_target
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: kubernetes_pod_name
        - job_name: kubernetes-kube-controller-manager
          honor_labels: true
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'kube-system/kube-controller-manager.+'
          - source_labels:
            - __address__
            action: replace
            target_label: __address__
            regex: (.+?)(\\:\\d+)?
            replacement: $1:10252
          - source_labels:
            - __meta_kubernetes_pod_name
            action: replace
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
        - job_name: kubernetes-kube-scheduler
          honor_labels: true
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'kube-system/kube-scheduler.+'
          - source_labels:
            - __address__
            action: replace
            target_label: __address__
            regex: (.+?)(\\:\\d+)?
            replacement: $1:10251
          - source_labels:
            - __meta_kubernetes_pod_name
            action: replace
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
        - job_name: kube-state-metrics
          honor_labels: true
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'monitoring/prometheus-kube-state-metrics.+'
          - source_labels:
            - __address__
            action: replace
            target_label: __address__
            regex: (.+?)(\\:\\d+)?
            replacement: $1
          - source_labels:
            - __meta_kubernetes_pod_name
            action: replace
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
        - job_name: kubernetes-kube-proxy
          honor_labels: true
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_pod_name
            separator: '/'
            regex: 'kube-system/kube-proxy.+'
          - source_labels:
            - __address__
            action: replace
            target_label: __address__
            regex: (.+?)(\\:\\d+)?
            replacement: $1:10249
          - source_labels:
            - __meta_kubernetes_pod_name
            action: replace
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
        alerting:
          alertmanagers:
          - kubernetes_sd_configs:
              - role: pod
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
            - source_labels: [__meta_kubernetes_namespace]
              regex: default
              action: keep
            - source_labels: [__meta_kubernetes_pod_label_app]
              regex: prometheus
              action: keep
            - source_labels: [__meta_kubernetes_pod_label_component]
              regex: alertmanager
              action: keep
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_probe]
              regex: .*
              action: keep
            - source_labels: [__meta_kubernetes_pod_container_port_number]
              regex:
              action: drop
